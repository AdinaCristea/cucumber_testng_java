{"name":"Automation Framework","tagline":"BDD Cucumber Selenium Webdriver Appium Rest-Assured Test Automation Framework","body":"==================================================================================\r\nBDD Cucumber Selenium Webdriver Appium Rest-Assured Java Test Automation Framework\r\n==================================================================================\r\nThis project is a template test automation framework, which provides structured and standard way of \r\ncreating automated test scripts for GUI, Mobile and API level tests across projects  \r\n\r\nThis is a reusable automation framework that blends together Selenium WebDriver, Appium, Android Driver, RestEasy, SauceLabs and Cucumber JVM (incorporating Gherkin and the BDD 'Given, When Then' testing construct)   \r\n\r\nThis framework supports automation of : - \r\n*Web Browsers (Firefox, Chrome, Internet Explorer, Safari)  \r\n*Web Browser Responsive Design with view ports configuration  \r\n*Mobile Automation on Emulated and Physical Devices, for Native, Hybrid, and Web App  \r\n*Mobile Automation on Cloud using SauceLabs\r\n  \r\n\r\nThe framework incorporates design principle of BDD (Behaviour driven development) which promotes\r\n writing acceptance tests by describing behaviour of application under test in simple english language from\r\n the perspective of its stakeholders. \r\n Having test written in Natural language helps the Project Team \r\n (Product Owners, Business Analysts, Development and QA team) to understand and track the requirements\r\n \r\nSupports Custom Page Object model which represents the screens of AUT as a series of objects and \r\nencapsulates the fields represented by a page which ultimately avoids duplication and improves code maintainability and readability.  \r\n    \r\nSonar Continuous Code Quality Management: -\r\nconventions (Checkstyle), bad practices (PMD) and potential bugs (FindBugs).\r\n\r\n\r\nTools & libraries\r\n=================\r\nThe test automation framework is comprised of following tools and libraries  \r\n\r\n*Cucumber-JVM:- BDD Framework  \r\n*Custom Page Object Pattern and utility functions  \r\n*Selenium WebDriver: - Browser automation framework\r\n*Selenium Grid: - Distribute test Execution across several machines  \r\n*Android Driver: - Android Mobile Automation  \r\n*Appium: - Mobile Native app, Hybrid App, Web app  \r\n*SauceLabs: - Cloud Based testing of mobile and Web Apps  \r\n*JAVA: - Programming language  \r\n*TestNg: - TestNg Java testing framework  \r\n*Maven: - Build tool  \r\n*Jenkins: - Continuous Integration  \r\n*Lombok: - Java utility api  \r\n*PicoContainer: - Standard Dependency Injection     \r\n*Git OR SVN: - Version Control  \r\n*Github or Local Git Server: - Git repository hosted server  \r\n*Intellij Or Eclipse: - Integrated Development Environment  \r\n*AssertJ: - Matcher's  \r\n*Loggers: - Simple Logging Facade for Java  \r\n*Resource Bundle: - Supporting i18n Localisation and Externalise String \r\n*Joda-Time: - Java Date time Api  \r\n*SonarQube (optional): - Code Quality and Code Coverage  \r\n*DbUtils Mysql (optional): - Java Database utility api  \r\n*Rest-Assured (optional): - Restful Api framework     \r\n*PhantomJsDriver, GhostDriver: - Full web stack No browser required supporting headless testing\r\n\r\nTest Automation framework support\r\n------------------------------------------\r\nGaurav Karvir\r\n--------------\r\nTest Automation Architect  \r\nsgtechuk@gmail.com  \r\n\r\n\r\n\r\nMachine Configuration\r\n====================\r\nConfigure Ubuntu / Windows and setup: -   \r\n*Java 8  \r\n*Git  / SVN  \r\n*Maven  \r\n\r\n\r\nGet the latest Source Code\r\n===========================\r\nOpen Terminal or command line\r\ncd to the desired folder where the test automation source code needs to be checkout\r\n\r\nRun command\r\ngit clone https://github.com/gauravkarvir/cucumber_testng_java.git\r\n\r\nThis will download the latest template source code\r\n\r\nIDE Configuration\r\n==================\r\nIntellij plugins  \r\n----------------\r\nConfigure and Install Following Plugins  \r\nFile >> Setting >> Plugins >> Browser Repositories>\r\n\r\n*Cucumber for Java\r\n*Gherkin\r\n*lombok\r\n*Git Integration/ SVN Integration  \r\n*Maven Integration\r\n*SonarQube (optional)\r\n\r\nEclipse plugins  \r\n----------------\r\nConfigure and Install Following Plugins  \r\nHelp>>Install new software\r\n*Cucumber for Java\r\nhttp://cucumber.github.com/cucumber-eclipse/update-site  \r\n\r\n*lombok\r\nDownload lombok.jar from http://projectlombok.org/download.html\r\nCopy the Jar to eclipse installation directory\r\nright click the Jar>Open with Open JDK or Oracle JDK Java 7 Runtime\r\nFollow the Installation Steps    \r\n\r\n*TestNg  \r\n\r\n*Git Integration\r\n\r\n*SonarQube (optional)\r\n\r\nPlugin configuration for Cucumber Feature\r\nOpen Run Configurations\r\nSelect Cucumber Feature and create one new configuration\r\nProject: salmonAutomationFramework\r\nFeature: src/salmonAutomationFramework/src/test/resources/features\r\nGlue:  com.salmon.test.step_definitions\r\nReports:  monochrome, pretty\r\n\r\nFile >> Setting >>  \r\nSearch for Annotation Processing  \r\n(Java Compiler ... Annotation Processing>> Enable the check box\r\n\r\n\r\nImport Project into Intellij\r\n----------------------------\r\nFile>Import Project>\r\nBrowse to SalmonAutomationFramework\r\n\r\n\r\n\r\nImport Project into Eclipse\r\n--------------------------\r\nFile>Import>Maven>Existing Maven Projects>Next>\r\nBrowse to SalmonAutomationFramework\r\nEnsure pom.xml is found\r\nFinish\r\n\r\nopen terminal\r\ncd to test root directory\r\nrun \"mvn clean eclipse:eclipse\" \r\n\r\n\r\n\r\nFramework Setup steps\r\n============================\r\nThe URL, Browser Configuration, jdbc connections etc are defined in the respective config.properties file under each desired profile which you want to run.\r\nIn pom.xml we use the relative path within <profile.path> as shown below to invoke or make use of these profiles. \r\nsrc/main/resources/profiles\r\n\r\nOpen \"pom.xml\" \r\nScroll to Profile section : - Choose desired profile e.g \"dev\" for running locally\r\n\r\n        <profile>\r\n\t\t\t<id>dev</id>\r\n\t\t\t<activation>\r\n\t\t\t\t<activeByDefault>true</activeByDefault>\r\n\t\t\t</activation>\r\n\t\t\t<properties>\r\n\t\t\t\t<profile.path>/profiles/dev/config.properties</profile.path>\r\n\t\t\t\t<testToRun>**/*WebATSuite*.class</testToRun>\r\n\t\t\t</properties>\r\n\t\t</profile>\r\n\r\n\r\nCompile Build or Run Tests\r\n==========================\r\n\r\nCommand Line\r\n\r\ncd to root ot salmonAutomationFramework project directory\r\n\r\nTo clean and compile the build\r\n-----------------------------\r\nmvn clean install -DskipTests\r\n\r\nTo run all tests parallel\r\n------------------------\r\nmvn clean install  \r\n\r\nOR\r\n\r\nmvn clean install -P dev  \r\n\r\n*Note -P dev is default profile hence doesn't need to be specified for every run \r\n\r\nTo run a single test with tags\r\n------------------------\r\n\r\nmvn clean install -Dcucumber.options=\"--tags @gui --tags ~@api\" -P single\r\n\r\n** Note \"~\" before tag means this specific tag will not run\r\n\r\nTo Rerun failed test scenarios\r\n---------------------------------------------\r\nAfter a test suite is run. There is rerun.txt created at the project root level in rerun folder. This rerun file contains the details of all the failed scenarios.\r\ne.g master_cucumber_testng\\rerun\\rerun.txt\r\n\r\nmvn clean install -Dcucumber.options=\"@rerun/rerun.txt\" -P single\r\n\r\n\r\nJenkins\r\n======\r\n\r\nmvn clean install  -P jenkins\r\n\r\n** Create 3 string parameters in jenkins \r\nwith the below conventions which will be passed on as an argument to the above maven command  \r\n\r\nKey: cucumber.options Default Value: --tags @gui, @api     \r\nKey: driverhost  Default Value: 0000.000.000.00 (RAS server with selenium server configured for the project)  \r\nKey: driverport  Default Value: 4444  \r\n\r\n\r\nReport\r\n======\r\n\r\nLocal reports\r\n-------------\r\nStandard HTML Report  \r\nA report will be generated at /target/cucumber-report/index.html  \r\n\r\nPreety Cucumber-Html Report  \r\nA report will be generated at /target/cucumber-report/cucumber-html-reports/feature-overview.html \r\n\r\nJenkins report\r\n--------------\r\nThe report will be available as part of configured Jenkins test build  \r\n**Cucumber plugin for Jenkins needs to be installed\r\n\r\n\r\n\r\n\r\n\r\nGetting Started\r\n===========================\r\n\r\n\r\nFeature Files\r\n-------------------------------------------------------------------\r\nThese files contains the acceptance criteria which are written in Gherkin Language and contains various scenarios.  \r\nThe feature files are tagged with \"@tagname\" to group common feature files \r\n\r\nFile Extension:  *.feature    \r\nLocation: \"/home/dev/src/salmonAutomationFramework/src/test/resources/features\"      \r\nDirectory:  Separate directories for GUI and API tests, Group common features files in a \r\nsingle directory    \r\nFile Conventions:Meaning full name \"WebRegister.feature\"\r\nExample:   \r\n@gui\r\nFeature: REGISTER:- As a new customer of Lloydspharmacy I would like to register \r\nScenario:Perform a New registration for a customer\r\n    Given I navigate to the Lloydspharmacy \"HOME\" page\r\n\r\n\r\nPage Objects\r\n-------------------------------------------------------------------\r\nPageObjects are used to store the WebElements for a Web Page.\r\nA good practice is to have a separate class for every single WebPage.\r\nTo avoid duplication for multiple pages which have common web page elements a Parent class can be created \r\nand the child class can then inherit.  \r\nEvery Page  class extends \"PageObject.class\" to make use of the WebDriver Object and utility functions.  \r\nIn case of Parent and Child Class, Parent class extends PageObject class and child class extends Parent class      \r\n   \r\nLocation: /home/dev/src/salmonAutomationFramework/src/test/java/com/salmon/test/pageobjects\r\nDirectory structure: Group common Page Objects classes in a single directory e.g Login Functionality Classes in Login Directory      \r\nFile Conventions:Every Class file ends with Page.class (Homepage.class)  \r\n\r\nExample:   \r\n\r\npublic class HomeSamplePage extends PageObject {\r\n\r\n    private By headerSignInLink = By.cssSelector(\"#headerSignInLink a\");\r\n\r\n    public void clickSignInLink() {\r\n        waitForExpectedElement(headerSignInLink).click();\r\n    }\r\n}\r\n\r\n\r\nStep Definitions\r\n--------------------------------------------------------------------\r\nEvery steps defined in Feature file needs to be implemented in Step Definitions Class\r\n\r\nLocation: /home/dev/src/salmonAutomationFramework/src/test/java/com/salmon/test/step_definitions \r\nDirectory structure: Separate directories for GUI and API tests, Group common step definition files in a \r\n                     single directory    \r\nFile Conventions:Every Class file ends with Steps.class (LoginSteps.class)  \r\n\r\nExample:  \r\n\r\npublic class HomePageSteps {\r\n\r\n   private HomeSamplePage homePage =  new HomeSamplePage();\r\n\r\n    @And(\"^i click on Sign In on the Home Page$\")\r\n    public void i_click_on_Sign_In_on__the_Home_Page() throws Throwable {\r\n        homePage.clickSignInLink();\r\n    }\r\n}\r\n\r\nRun Test Suite\r\n--------------------------------------------------------------------\r\nTest Suites are used to run a group of Tests which are tagged and represented in form of Feature files & Scenarios\r\n\r\nLocation: /home/dev/src/salmonAutomationFramework/src/test/java/com/salmon/test\r\nFile Conventions:Every Class file ends with Suite.class (RunWebATSuite.class)  \r\n\r\n\r\n    @CucumberOptions(features = \"target/test-classes\", tags = {\"@gui\"}, monochrome = true, plugin = {\r\n            \"pretty\", \"html:target/cucumber-report/runwebat\",\r\n            \"json:target/cucumber-report/runwebat/cucumber.json\",\r\n            \"rerun:target/cucumber-report/runwebat/rerun.txt\"},\r\n            glue = \"com.salmon.test\")\r\n    public class RunWebATSuite extends AbstractTestNGCucumberTests {\r\n    }\r\n\r\nWhere: -  \r\nfeatures: represent the location of feature files from the compiled build  \r\ntags:  multiple tags can be specified by comma separated denotation, if a specific tag needs to be excluded then this \r\n        can be specified by \"~\" . e.g \"~@api\" feature files tagged with \"~api\" will not be run as a part of Test Suite.  \r\nplugin: html,json and rerun reports are created. if a TesSuite is renamed then change the reporting directory name for both reports  \r\n   \r\n\r\nOther ways to run the tests or Test Suite\r\n---------------------------------------------\r\n*command line using Maven:-  mvn clean install -P dev  \r\n*IDE Plugins: - Eclipse or Intellij via TestNg plugin or Maven plugin or Cucumber-Java plugin  \r\n*IDE TestNg Suite xml: - file located at \"src/test/resources\" TestNGRunTestSuite.xml (Right click and run as TestNg)\r\n  \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}